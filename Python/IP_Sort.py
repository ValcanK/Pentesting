#!/usr/bin/python3
# Author: Samuel - Valcan_K - @valcan_k

# Importing the required modules
import sys
import re
import argparse

# The main function will collect the user input and pass it to the sorting function
def main():

	parser = argparse.ArgumentParser()
	   
	parser.add_argument('-f', '--file', action='store', help="Specify a file to read IP addresses from")
	parser.add_argument('-o', '--output', action='store', help='Specify a file name if you would like to save the output')
	args = parser.parse_args()

	if args.output:
		IP_Sort(args.file,args.output)
	elif args.file:
		args.output = ""
		IP_Sort(args.file,args.output)
	else:
		print(parser.print_help())

# This is the primary function that will parse and sort the IP addresses from the provided file
def IP_Sort (x,y):
	file = open(x)
	Lines_In_File = [target_IP.rstrip() for target_IP in file.readlines()]
	new_targets = []
	# This is the error handling portion
	# It will use a regular expression "match" to determine if the string in is actually an IP address
	# If it doesn't match an IP address, it won't display
	# This is just in case random strings or characters end up in the file
	for target_IP in Lines_In_File:
		match = re.search(r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$',target_IP)
		if match:
			new_targets.append(target_IP)
		else:
			continue
	# Once the actual IP addresses are identified, they will be sorted and printed out
	sorted_list = sorted(new_targets, key = lambda x:tuple(map(int, x.split('.'))))
	if y != "":
		out_file = open(y, "a")
		out_file.write("IP" + ",\r\n")
		for single_IP in sorted_list:
			out_file.write(single_IP + ",\r\n")
		out_file.close()
		for single_IP in sorted_list:
			print(single_IP)
	else:
		for single_IP in sorted_list:
			print(single_IP)

	file.close()
if __name__=='__main__':
    main()
